@page "/settings/investment-periods"
<AuthorizeView Roles="GroupAdmin">
    <Authorized>
        <MudContainer Class="mt-16 px-8 cont" MaxWidth="MaxWidth.False">
            <MudGrid Spacing="3" Justify="Justify.Center">
                <MudItem align="center" xs="12">
                    <MudPaper Elevation="20" Class="title-card p-4 ">
                        <MudText Class="text-white" Align="Align.Center" Typo="Typo.h5">Manage Investment Periods</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudButton OnClick="ToggleAdd" Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PersonAdd">Add</MudButton>
                </MudItem>
                <MudItem xs="12">
                    <table class="table table-striped table-hover table-responsive-sm">
                        <caption>List of Investment Periods</caption>
                        <thead class="thead-dark">
                            <tr>
                                <th>Id</th>
                                <th>Begin Date</th>
                                <th>End Date</th>
                                <th>Duration</th>
                                <th>Minimum Amount</th>
                                <th>Date Created</th>
                                <th>Created By</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in DataSource)
                            {

                                TimeSpan duration = Convert.ToDateTime(item.EndDate).Subtract(Convert.ToDateTime(item.BeginDate));
                                Color color = (item.Status == PeriodStatus.Open) ? Color.Success : Color.Dark;
                                <tr class="text-white">
                                    <td>@item.Id</td>
                                    <td>@Convert.ToDateTime(item.BeginDate).ToShortDateString()</td>
                                    <td>@Convert.ToDateTime(item.EndDate).ToShortDateString()</td>
                                    <td>@((int)duration.TotalDays) days </td>
                                    <td>@item.MinAmount ZMW</td>
                                    <td>@item.CreatedOn</td>
                                    <td>@item.CreatedBy</td>
                                    <td><MudChip Size="Size.Small" Color="color" Text="@item.Status.ToString()" /></td>
                                    <td>
                                        <MudButton StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning">Edit</MudButton>
                                        <MudButton OnClick="()=>ToggleDelete(item)" StartIcon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" Color="Color.Error">Remove</MudButton>
                                    </td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </Authorized>
</AuthorizeView>
<style>
    body {
        background-color: #13262F;
    }

    .cont {
        background-color: #13262F;
    }

    .title-card {
        max-width: fit-content;
        border-radius: 10px;
        background-color: #13262F;
    }
</style>
@code {
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }
    List<InvestmentPeriod> DataSource { get; set; } = new();
    ClaimsPrincipal claimsPrincipal = new();
    Guid myGuid = new();
    VillageBankGroup VillageBank { get; set; } = new();
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.TopCenter, DisableBackdropClick = true };
    void ToggleDelete(InvestmentPeriod record)
    {

    }
    protected async override Task OnInitializedAsync()
    {
        claimsPrincipal = (await AuthenticationStateTask).User;
        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            myGuid = await userService.GetGuid(claimsPrincipal.Identity.Name);
            var admin = await groupAdminService.GetByUserGuid(myGuid);
            VillageBank = admin.Group;

        }
    }
    async Task Init()
    {
        DataSource = await investmentPeriodService.GetInvestmentPeriodsAsync(VillageBank.Id);
    }
    async void ToggleAdd()
    {
        var parameters = new DialogParameters { ["VillageBankId"] = VillageBank.Id };
        var dialog = dialogService.Show<AddPeriodModal>("Add New Investment Period", parameters, maxWidth);
        var result = await dialog.Result;
    }
}