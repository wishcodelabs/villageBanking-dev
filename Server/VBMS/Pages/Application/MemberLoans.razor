@page "/loan/my-applications"
<AuthorizeView Roles="GroupAdmin">
    <NotAuthorized>
        <MudContainer Class="mt-16 px-8 cont" MaxWidth="MaxWidth.False">
            <MudGrid Spacing="3" Justify="Justify.Center">
                <MudItem xs="12">
                    <div class="bg-white title-card shadow rounded overflow-hidden sticky-md-top">
                        <div class="px-4 pt-0 pb-2 cover">
                            <div class="media align-items-end profile-head">
                                <div class="profile mr-3"><img src="@image" alt="..." width="130" class="rounded mb-2 img-thumbnail"><a href="#" class="btn btn-outline-dark btn-sm btn-block">Edit profile</a></div>
                                <div class="media-body mb-5 text-white">
                                    <h3 class="mt-0 mb-4 text-white">Hi, @Membership.PersonalDetails.FirstName @Membership.PersonalDetails.LastName</h3>
                                    <p class="large mb-6 mt-n2 text-black"> <i class="fas fa-map-marker-alt mr-2"></i>@VillageBank.GroupName</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-light d-flex p-4 justify-content-center text-center">
                            <h3 class="text-black font-bold text-3xl">Loans</h3>
                        </div>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="24" Class="p-1 mt-4 bg-gradient-to-r from-blue-900 to-gray-800 shadow text-2xl text-white">
                        <MudGrid Justify="Justify.SpaceBetween">
                            <MudItem xs="6" md="3"><MudButton Class="m-2 mb-1" OnClick="ToggleAdd" Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircle">New Application</MudButton></MudItem>
                            <MudItem xs="6" md="3">
                                <MudTextField OnBlur="Refresh" Immediate="true" ValueChanged="(e)=>Search(e)" Class="bg-white bar" T="string" Label="Search" Placeholder="Type here to search" Clearable="true" T="string" Variant="Variant.Filled" />
                            </MudItem>
                            <MudHidden Breakpoint="Breakpoint.MdAndDown">
                                @if (openPeriods.Any())
                                {
                                    <MudItem xs="6" md="3">

                                        <MudSelect T="int"
                                               Dense="true"
                                               Class="bg-white bar"
                                               ValueChanged="(e)=>Filter(e)"
                                               Immediate="true"
                                               Variant="Variant.Filled"
                                               Label="Filter By Investment Period"
                                               Required="true">
                                            <MudSelectItem T="int" Value="0">---- All ----</MudSelectItem>
                                            @foreach (var item in openPeriods)
                                            {
                                                <MudSelectItem T="int" Value="@item.Id">@(Convert.ToDateTime(item.BeginDate).ToShortDateString()) - @(Convert.ToDateTime(item.EndDate).ToShortDateString())</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                }
                                else
                                {
                                    <MudItem xs="6" md="6">
                                        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Dense="true">No investment periods have been opened for this group .</MudAlert>

                                    </MudItem>
                                }
                            </MudHidden>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <table class="table table-striped table-hover table-responsive-sm">
                        <caption>List of Loan Applications</caption>
                        <thead class="thead-dark">
                            <tr>

                                <th>Date Submitted</th>
                                <th>Operating Period</th>
                                <th>Loan Type</th>
                                <th>Maximum Amount</th>
                                <th>Requested Amount</th>
                                <th>Interest Rate</th>
                                <th>Status</th>                                
                                <th>Payback Period</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in DataSource)
                            {

                                <tr class="text-white">

                                    <td>@String.Format("{0:D:HH:MM}",item.DateSubmitted)</td>
                                    <td>@(Convert.ToDateTime(item.Period.BeginDate).ToShortDateString()) - @(Convert.ToDateTime(item.Period.EndDate).ToShortDateString())</td>
                                    <td>@item.LoanType.LoanName</td>
                                    <td>@item.LoanType.MaxLoanAmount</td>
                                    <td>@item.RequestedAmount.ToString("N2") ZMW</td>
                                    <td> %</td>
                                    <td><MudChip  Size="Size.Small" Color="GetColor(item)" Text="@item.Status.ToString()" /></td>
                                    <td>@item.LoanType.PaybackDuration  @(item.LoanType.PaybackDuration<=1? "week":"weeks")</td>                                 
                                    
                                     <td>
                                        <MudButton title="edit this record" OnClick="()=>ViewDetails(item)" StartIcon="@Icons.Material.Filled.ViewAgenda" Size="Size.Small" Color="Color.Tertiary">Details</MudButton>
                                       
                                    </td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

<style>
    body {
        background-color: #13262F;
    }
    .title-card {
      
        background-color: #13262F;
    }

    .profile-head {
        transform: translateY(5rem)
    }

    .cover {
        background-image: url(https://images.unsplash.com/photo-1530305408560-82d13781b33a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1352&q=80);
        background-size: cover;
        background-repeat: no-repeat
    }

    .group-inactive {
        max-width: fit-content;
    }

    .bar {
        border-top-left-radius: 8px;
        border-top-right-radius: 8px
    }
</style>

@code {
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }
    VillageBankGroup VillageBank { get; set; } = new();
    ClaimsPrincipal claimsPrincipal = new();
    Guid myGuid = new();
    string selectedRow;
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center, DisableBackdropClick = true };
    int currentPeriod;
    VillageGroupMembership Membership { get; set; } = new();
    List<InvestmentPeriod> openPeriods { get; set; } = new();
    List<LoanApplication> DataSource { get; set; } = new();
    HashSet<LoanApplication> list;
    string image;

    protected override async Task OnInitializedAsync()
    {
        Membership.PersonalDetails = new();
        claimsPrincipal = (await AuthenticationStateTask).User;
        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            myGuid = await userService.GetGuid(claimsPrincipal.Identity.Name);
            Membership = await membershipService.GetByGuid(myGuid);
            VillageBank = Membership.VillageBankGroup;
            await Refresh();




        }
    }
    async Task ToggleAdd()
    {
        var parameters = new DialogParameters { ["Membership"] = Membership,["IsEditing"] = false };
        var dialog = dialogService.Show<LoanApplicationFormModal>("Apply for Loan", parameters, maxWidth);
        var result = await dialog.Result;
        if(!result.Cancelled)
        {
            if((bool)result.Data)
            {
                await Refresh();
            }
        }
    }
    async Task ViewDetails(LoanApplication record)
    {

    }
    async void Search(string keyWord)
    {

    }
    async Task Filter(int value)
    {

    }
    Color GetColor(LoanApplication loanApplication)=>
     loanApplication.Status switch {
         LoanApplicationStatus.Approved => Color.Success,
         LoanApplicationStatus.Pending=>Color.Surface,
         LoanApplicationStatus.Rejected=>Color.Error,
         _=>Color.Default
     };
    async Task Refresh()
    {    
        openPeriods = await investmentPeriodService.GetByStatusAsync(PeriodStatus.Open, VillageBank.Id);
        image = Membership.PersonalDetails.Gender == Gender.Female ? "/images/female-icon.jpg" : "/images/male-icon.jpg";
        DataSource = new();
        DataSource = await loanApplicationService.GetAllByUserGuid(Membership.UserGuid, currentPeriod);
        list = new HashSet<LoanApplication>(DataSource);
        StateHasChanged();


    }

}