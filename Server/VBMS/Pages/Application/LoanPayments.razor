@page "/loan/payments"
<AuthorizeView Roles="GroupAdmin">
    <Authorized>
        <MudContainer Class="mt-16 px-8 cont" MaxWidth="MaxWidth.False">
            <MudGrid Spacing="3" Justify="Justify.Center">
                <MudItem align="center" xs="12">
                    <MudPaper Elevation="20" Class="title-card p-4 ">
                        <MudText Class="text-white" Align="Align.Center" Typo="Typo.h5">Manage Loan Payments</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="24" Class="p-1 mt-4 bg-gradient-to-r from-blue-900 to-gray-800 shadow text-2xl text-white">
                        <MudGrid Justify="Justify.SpaceBetween">
                            <MudItem xs="6" md="3"><MudButton Class="m-2 mb-1" OnClick="ToggleAdd" Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircle">Add</MudButton></MudItem>
                            <MudItem xs="6" md="3">
                                <MudTextField OnBlur="Refresh" Immediate="true" ValueChanged="(e)=>Search(e)" Class="bg-white bar" T="string" Label="Search" Placeholder="Type here to search" Clearable="true" T="string" Variant="Variant.Filled" />
                            </MudItem>
                            <MudHidden Breakpoint="Breakpoint.MdAndDown">
                                <MudItem xs="6" md="3">
                                    @if (openPeriods.Any())
                                    {
                                        <MudSelect T="int"
                                               Dense="true"
                                               Class="bg-white bar"
                                               ValueChanged="(e)=>Filter(e)"
                                               Immediate="true"
                                               Variant="Variant.Filled"
                                               Label="Filter By Investment Period"
                                               Required="true">
                                            <MudSelectItem T="int" Value="0">---- All ----</MudSelectItem>
                                            @foreach (var item in openPeriods)
                                            {
                                                <MudSelectItem T="int" Value="@item.Id">@(Convert.ToDateTime(item.BeginDate).ToShortDateString()) - @(Convert.ToDateTime(item.EndDate).ToShortDateString())</MudSelectItem>
                                            }
                                        </MudSelect>
                                    }
                                    else
                                    {
                                        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Dense="true">No investment periods have been opened for this group . <a class="active" href="/settings/investment-periods">Click here to open</a></MudAlert>
                                    }
                                </MudItem>
                            </MudHidden>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <table class="table table-striped table-hover table-responsive-sm">
                        <caption>List of Loan Payments</caption>
                        <thead class="thead-dark">
                            <tr>

                                <th>Date</th>
                                <th>Debtor</th>
                                <th>Loan</th>
                                <th>Period</th>
                                <th>Interest Rate</th>
                                <th>Principal Amount</th>
                                <th>Amount Paid (ZMW)</th>
                                <th>Interest Paid</th>
                                <th>Principal OutStanding</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in DataSource)
                            {

                                Color color = (item.Status == Status.Approved) ? Color.Success : Color.Dark;
                                <tr class="text-white">

                                    <td><MudChip title="Approve this investment?" OnClick="()=>Approve(item)" Size="Size.Small" Color="color" Text="@item.Status.ToString()" /></td>
                                    <td>
                                        <MudButton title="edit this record" OnClick="()=>ToggleEdit(item)" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning">Edit</MudButton>
                                        <MudButton title="Permanently delete this item?" OnClick="()=>ToggleDelete(item)" StartIcon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" Color="Color.Error">Delete</MudButton>
                                    </td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </Authorized>
</AuthorizeView>




<style>
    body {
        background-color: #13262F;
    }

    .cont {
        background-color: #13262F;
    }

    .bar {
        border-top-left-radius: 8px;
        border-top-right-radius: 8px
    }

    .title-card {
        max-width: fit-content;
        border-radius: 10px;
        background-color: #13262F;
    }

    .banner-color {
        height: 70px;
    }
</style>
@code{

    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }
    VillageBankGroup VillageBank { get; set; } = new();
    ClaimsPrincipal claimsPrincipal = new();
    Guid myGuid = new();
    string selectedRow;
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center, DisableBackdropClick = true };
    int investmentPeriod;
    List<InvestmentPeriod> openPeriods { get; set; } = new();
    List<LoanPayment> DataSource { get; set; } = new();
    HashSet<LoanPayment> list;
    List<Loan> Loans { get; set; } = new();

    async Task Refresh()
    {

    }
    async Task ToggleAdd()
    {

    }
    async Task ToggleDelete(LoanPayment record)
    {

    }
    async Task ToggleEdit(LoanPayment record)
    {

    }
    async void Filter(int value)
    {

    }
    async Task Approve(LoanPayment record)
    {

    }
    async Task  Search(string keyWord)
    {
        
    }

}