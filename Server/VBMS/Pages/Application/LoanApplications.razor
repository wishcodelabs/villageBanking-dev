@page "/loan/applications"
<AuthorizeView Roles="GroupAdmin">
    <Authorized>
        <MudContainer Class="mt-16 px-8 cont" MaxWidth="MaxWidth.False">
            <MudGrid Spacing="3" Justify="Justify.Center">
                <MudItem align="center" xs="12">
                    <MudPaper Elevation="20" Class="title-card p-4 ">
                        <MudText Class="text-white" Align="Align.Center" Typo="Typo.h5">Manage Loan Applications</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="24" Class="p-1 mt-4 bg-gradient-to-r from-blue-900 to-gray-800 shadow text-2xl text-white">
                        <MudGrid Justify="Justify.SpaceBetween">
                            
                            <MudItem xs="6" md="3">
                                <MudTextField OnBlur="Refresh" Immediate="true" ValueChanged="(e)=>Search(e)" Class="bg-white bar" T="string" Label="Search" Placeholder="Type here to search" Clearable="true" T="string" Variant="Variant.Filled" />
                            </MudItem>
                            <MudHidden Breakpoint="Breakpoint.MdAndDown">
                                @if (openPeriods.Any())
                                {
                                    <MudItem xs="6" md="3">

                                        <MudSelect T="int"
                                               Dense="true"
                                               Class="bg-white bar"
                                               ValueChanged="(e)=>Filter(e)"
                                               Immediate="true"
                                               Variant="Variant.Filled"
                                               Label="Filter By Investment Period"
                                               Required="true">
                                            <MudSelectItem T="int" Value="0">---- All ----</MudSelectItem>
                                            @foreach (var item in openPeriods)
                                            {
                                                <MudSelectItem T="int" Value="@item.Id">@(Convert.ToDateTime(item.BeginDate).ToShortDateString()) - @(Convert.ToDateTime(item.EndDate).ToShortDateString())</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                }
                                else
                                {
                                    <MudItem xs="6" md="6">
                                        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Dense="true">No investment periods have been opened for this group .</MudAlert>

                                    </MudItem>
                                }
                            </MudHidden>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                      <table class="table table-striped table-hover table-responsive-sm">
                        <caption>List of Loan Applications</caption>
                        <thead class="thead-dark">
                            <tr>
                                <th>Applicant</th>
                                <th>Date Submitted</th>
                                <th>Operating Period</th>
                                <th>Loan Type</th>
                                <th>Maximum Amount</th>
                                <th>Requested Amount</th>
                                <th>Interest Rate</th>
                                <th>Status</th>                                
                                <th>Payback Period</th>                            
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in DataSource)
                            {

                                <tr class="text-white">
                                    <td>@item.Applicant.PersonalDetails.FirstName  @item.Applicant.PersonalDetails.LastName </td>
                                    <td>@(item.DateSubmitted.ToString("MMMM yyyy H:mm"))</td>
                                    <td>@(Convert.ToDateTime(item.Period.BeginDate).ToShortDateString()) - @(Convert.ToDateTime(item.Period.EndDate).ToShortDateString())</td>
                                    <td>@item.LoanType.LoanName</td>
                                    <td>@item.LoanType.MaxLoanAmount</td>
                                    <td>@item.RequestedAmount.ToString("N2") ZMW</td>
                                    <td>@item.InterestRate.InterestRate %</td>
                                    <td><MudChip  Size="Size.Small" Color="GetColor(item)" Text="@item.Status.ToString()" /></td>
                                    <td>@item.InterestRate.PaybackDuration  @(item.InterestRate.PaybackDuration<=1? "week":"weeks")</td>                                 
                                    
                                     <td>
                                        <MudButton title="edit this record" OnClick="()=>ViewDetails(item)" StartIcon="@Icons.Material.Filled.ViewAgenda" Size="Size.Small" Color="Color.Tertiary">Details</MudButton>
                                       
                                    </td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </Authorized>
</AuthorizeView>
<style>
    body {
        background-color: #13262F;
    }

    .cont {
        background-color: #13262F;
    }

    .bar {
        border-top-left-radius: 8px;
        border-top-right-radius: 8px
    }

    .title-card {
        max-width: fit-content;
        border-radius: 10px;
        background-color: #13262F;
    }

    .banner-color {
        height: 70px;
    }
</style>


@code {
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }
    VillageBankGroup VillageBank { get; set; } = new();
    ClaimsPrincipal claimsPrincipal = new();
    Guid myGuid = new();
    string selectedRow;
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.Center, DisableBackdropClick = true };
    int currentPeriod;
    VillageGroupMembership Membership { get; set; }
    List<InvestmentPeriod> openPeriods { get; set; } = new();
    List<LoanApplication> DataSource { get; set; } = new();
    HashSet<LoanApplication> list;
    string image;

    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = (await AuthenticationStateTask).User;
        if (claimsPrincipal.Identity.IsAuthenticated)
        {

            Membership = await membershipService.GetByGuid(claimsPrincipal.GetGuid());
            if (Membership is null)
            {
                await dialogService.ShowMessageBox("System Info", "Your village bank group is not active. If you are the admin. Activate the group.");
                navigationManager.NavigateTo("dashboard"); return;
            }
            VillageBank = Membership.VillageBankGroup;
            await Refresh();
        }
    }
    async Task ViewDetails(LoanApplication record)
    {
        var hasUnpaid = await loanService.HasDefaulted(record.ApplicantId);
        var parameters = new DialogParameters { ["Model"] = record,["HasLoan"]=hasUnpaid,["ApproverId"]= Membership.Id };
        var dialog = dialogService.Show<ViewLoanApplicationModal>("Loan Application Details", parameters, maxWidth);
        var result = await dialog.Result;
        if(!result.Cancelled)
        {
            if((bool)result.Data)
            {
                await Refresh();
            }
        }
    }
    async void Search(string keyWord)
    {

    }
    async Task Filter(int value)
    {

    }
    Color GetColor(LoanApplication loanApplication)=>
     loanApplication.Status switch {
         LoanApplicationStatus.Approved => Color.Success,
         LoanApplicationStatus.Pending=>Color.Surface,
         LoanApplicationStatus.Rejected=>Color.Error,
         _=>Color.Default
     };
    async Task Refresh()
    {    
        openPeriods = await investmentPeriodService.GetByStatusAsync(PeriodStatus.Open, VillageBank.Id);
        DataSource = new();
        DataSource = await loanApplicationService.GetAllByPeriod(currentPeriod,VillageBank.Id);
        list = new HashSet<LoanApplication>(DataSource);
        StateHasChanged();


    }




}
