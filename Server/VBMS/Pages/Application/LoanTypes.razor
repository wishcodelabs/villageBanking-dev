@page "/settings/loan-types"
<AuthorizeView Roles="GroupAdmin">
    <Authorized>
        <MudContainer Class="mt-16 px-8 cont" MaxWidth="MaxWidth.False">
            <MudGrid Spacing="3" Justify="Justify.Center">
                <MudItem align="center" xs="12">
                    <MudPaper Elevation="20" Class="title-card p-4 ">
                        <MudText Class="text-white" Align="Align.Center" Typo="Typo.h5">Manage Loan Types</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudButton OnClick="ToggleAdd" Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddChart">Add</MudButton>
                </MudItem>
                <MudItem xs="12">
                    <table class="table table-striped table-hover table-responsive-sm">
                        <caption>List of Loan Types</caption>
                        <thead class="thead-dark">
                            <tr>
                               
                                <th>Loan Name</th>
                                <th>Payback Period</th>
                                <th>Maximum Loan Amount</th>
                                <th>Interest Rates</th>
                                <th>Date Created</th>
                                <th>Created By</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in DataSource)
                            {                                
                                Color color = (item.IsActive) ? Color.Success : Color.Dark;
                                <tr class="text-white">
                                   
                                    <td>@item.LoanName</td>
                                    <td>@item.PaybackDuration  @(item.PaybackDuration<=1 ? "week" : "weeks")</td>
                                    <td>@item.MaxLoanAmount.ToString("N2") ZMW</td>
                                    <td>@item.CreatedOn</td>
                                    <td>@item.CreatedBy</td>
                                    <td><MudChip title="Change status" OnClick="()=>ToggleStatus(item)" Size="Size.Small" Color="color" Text='@(item.IsActive? "Active" : "Inactive")' /></td>
                                    <td>
                                        <MudButton title="edit this record" OnClick="()=>ToggleEdit(item)" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning">Edit</MudButton>
                                        <MudButton title="Permanently delete this item?"  OnClick="()=>ToggleDelete(item)" StartIcon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" Color="Color.Error">Delete</MudButton>
                                    </td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </Authorized>
</AuthorizeView>
<style>
    body {
        background-color: #13262F;
    }

    .cont {
        background-color: #13262F;
    }

    .title-card {
        max-width: fit-content;
        border-radius: 10px;
        background-color: #13262F;
    }
</style>
@code{

    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }
    List<LoanType> DataSource { get; set; } = new();
    ClaimsPrincipal claimsPrincipal = new();
    Guid myGuid = new();
    VillageBankGroup VillageBank { get; set; } = new();
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center, DisableBackdropClick = true };
    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = (await AuthenticationStateTask).User;
        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            myGuid = await userService.GetGuid(claimsPrincipal.Identity.Name);
            var admin = await groupAdminService.GetByUserGuid(myGuid);
            VillageBank = admin.Group;
            DataSource = await loanTypeService.GetLoanTypes(VillageBank.Id);
        }
    }
    async Task ToggleAdd()
    {
        var parameters = new DialogParameters { ["VillageBankId"] = VillageBank.Id };
        var dialog = dialogService.Show<AddLoanTypeModal>("Create New Loan Type", parameters, maxWidth);
        var result = await dialog.Result;
        if(!result.Cancelled)
        {
            if((bool)result.Data)
            {
                DataSource = new();
                DataSource = await loanTypeService.GetLoanTypes(VillageBank.Id);
                StateHasChanged();
            }
        }
    }
    async Task ToggleEdit(LoanType record)
    {
      var parameters = new DialogParameters { ["VillageBankId"] = VillageBank.Id,["Model"]=record,["IsEditing"]=true };
        var dialog = dialogService.Show<AddLoanTypeModal>($"Edit {record.LoanName}", parameters, maxWidth);
        var result = await dialog.Result;
        if(!result.Cancelled)
        {
            if((bool)result.Data)
            {
                DataSource = new();
                DataSource = await loanTypeService.GetLoanTypes(VillageBank.Id);
                StateHasChanged();
            }
        }
    }
    async Task ToggleDelete(LoanType record)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", record.LoanName);
        parameters.Add("DialogType", DialogType.Delete);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true };
        var dialog = dialogService.Show<SimpleDialog>("Delete", parameters, options);
        var response = await dialog.Result;
        if (!response.Cancelled)
        {
            if ((bool)response.Data)
            {
                //do the delete
                if (await loanTypeService.DeleteAsync(record))
                {
                    snackBar.Add("Record deleted successifully", Severity.Success);
                    DataSource = new();
                    DataSource = await loanTypeService.GetLoanTypes(VillageBank.Id);
                    StateHasChanged();
                }
                else
                {
                    snackBar.Add("Something went wrong while trying to delete the record", Severity.Error);
                }
            }
        }
    }
    async Task ToggleStatus(LoanType record)
    {
        
    }
}