@page "/group/investments"

<AuthorizeView Roles="GroupAdmin">
    <Authorized>
        <MudContainer Class="mt-16 px-8 cont" MaxWidth="MaxWidth.False">
            <MudGrid Spacing="3" Justify="Justify.Center">
                <MudItem align="center" xs="12">
                    <MudPaper Elevation="20" Class="title-card p-4 ">
                        <MudText Class="text-white" Align="Align.Center" Typo="Typo.h5">Manage Investments</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="24" Class="p-1 mt-4 bg-gradient-to-r from-blue-900 to-gray-800 shadow text-2xl text-white">
                        <MudGrid Justify="Justify.SpaceBetween">
                            <MudItem xs="6" md="3"><MudButton Class="m-2 mb-1" OnClick="ToggleAdd" Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircle">Add</MudButton></MudItem>
                            <MudItem xs="6" md="3">
                                <MudTextField OnBlur="Refresh" Immediate="true" ValueChanged="(e)=>Search(e)" Class="bg-white bar" T="string" Label="Search" Placeholder="Type here to search" Clearable="true" T="string" Variant="Variant.Filled" />
                            </MudItem>
                            <MudHidden Breakpoint="Breakpoint.MdAndDown">
                                @if (openPeriods.Any())
                                {
                                    <MudItem xs="6" md="3">

                                        <MudSelect T="int"
                                               Dense="true"
                                               Class="bg-white bar"
                                               ValueChanged="(e)=>Filter(e)"
                                               Immediate="true"
                                               Variant="Variant.Filled"
                                               Label="Filter By Investment Period"
                                               Required="true">
                                            <MudSelectItem T="int" Value="0">---- All ----</MudSelectItem>
                                            @foreach (var item in openPeriods)
                                            {
                                                <MudSelectItem T="int" Value="@item.Id">@(Convert.ToDateTime(item.BeginDate).ToShortDateString()) - @(Convert.ToDateTime(item.EndDate).ToShortDateString())</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                }
                                else
                                {
                                    <MudItem xs="6" md="6">
                                        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Dense="true">No investment periods have been opened for this group .</MudAlert>

                                    </MudItem>
                                }
                            </MudHidden>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <table class="table table-striped table-hover table-responsive-sm">
                        <caption>List of Investments @selectedRow</caption>
                        <thead class="thead-dark">
                            <tr>

                                <th>Date Invested</th>
                                <th>Investment Period</th>
                                <th>Investor Name</th>
                                <th>Investor NRC</th>
                                <th>Amount Invested</th>
                                <th>Added By</th>
                                <th>Status</th>
                                <th>Approved By</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in DataSource)
                            {

                                Color color = (item.Status == Status.Approved) ? Color.Success : Color.Dark;
                                <tr class="text-white">

                                    <td>@String.Format("{0:D}",Convert.ToDateTime(item.DateInvested))</td>
                                    <td>@(Convert.ToDateTime(item.Period.BeginDate).ToShortDateString()) - @(Convert.ToDateTime(item.Period.EndDate).ToShortDateString())</td>
                                    <td>@item.Investor.PersonalDetails.FirstName @item.Investor.PersonalDetails.LastName</td>
                                    <td>@item.Investor.PersonalDetails.NrcNumber</td>
                                    <td>@item.AmountInvested.ToString("N2") ZMW</td>
                                    <td>@item.CreatedBy</td>
                                    <td><MudChip title="Approve this investment?" OnClick="()=>Approve(item)" Size="Size.Small" Color="color" Text="@item.Status.ToString()" /></td>
                                    <td>
                                        @(!string.IsNullOrEmpty(item.ApprovedBy)?item.ApprovedBy:"N/A")
                                    </td>
                                    <td>
                                        <MudButton title="edit this record" OnClick="()=>ToggleEdit(item)" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning">Edit</MudButton>
                                        <MudButton title="Permanently delete this item?" OnClick="()=>ToggleDelete(item)" StartIcon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" Color="Color.Error">Delete</MudButton>
                                    </td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </Authorized>
</AuthorizeView>
<style>
    body {
        background-color: #13262F;
    }

    .cont {
        background-color: #13262F;
    }

    .bar {
        border-top-left-radius: 8px;
        border-top-right-radius: 8px
    }

    .title-card {
        max-width: fit-content;
        border-radius: 10px;
        background-color: #13262F;
    }

    .banner-color {
        height: 70px;
    }
</style>

@code {

    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }
    VillageBankGroup VillageBank { get; set; } = new();
    ClaimsPrincipal claimsPrincipal = new();
    Guid myGuid = new();
    string selectedRow;
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center, DisableBackdropClick = true };
    int investmentPeriod;
    List<InvestmentPeriod> openPeriods { get; set; } = new();
    List<Investment> DataSource { get; set; } = new();
    HashSet<Investment> list;
    protected override async Task OnInitializedAsync()
    {

        claimsPrincipal = (await AuthenticationStateTask).User;
        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            myGuid = claimsPrincipal.GetGuid();
            var admin = await groupAdminService.GetByUserGuid(myGuid);
            VillageBank = admin.Group;
            await Refresh();
            openPeriods = await investmentPeriodService.GetByStatusAsync(PeriodStatus.Open, VillageBank.Id);



        }
    }
    async Task ToggleAdd()
    {
        var parameters = new DialogParameters { ["VillageBankId"] = VillageBank.Id };
        var dialog = dialogService.Show<AddInvestmentModal>("Add New Investmet", parameters, maxWidth);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if ((bool)result.Data)
            {

                await Refresh();
            }
        }
    }
    async Task ToggleEdit(Investment record)
    {
        var parameters = new DialogParameters { ["VillageBankId"] = VillageBank.Id, ["Model"] = record, ["IsEditing"] = true };
        var dialog = dialogService.Show<AddInvestmentModal>($"Edit Record", parameters, maxWidth);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if ((bool)result.Data)
            {
                StateHasChanged();
            }
        }
    }

    async Task ToggleDelete(Investment record)
    {
        if (await memberRoleService.IsChairperson(myGuid))
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "this record");
            parameters.Add("DialogType", DialogType.Delete);
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true };
            var dialog = dialogService.Show<SimpleDialog>("Delete", parameters, options);
            var response = await dialog.Result;
            if (!response.Cancelled)
            {
                if ((bool)response.Data)
                {
                    //do the delete
                    if (await investmentService.DeleteAsync(record))
                    {
                        snackBar.Add("Record deleted successifully", Severity.Success);
                        await Refresh();
                    }
                    else
                    {
                        snackBar.Add("Something went wrong while trying to delete the record", Severity.Error);
                    }
                }
            }
        }
        else
        {
            snackBar.Add("Only a group chairperson can delete these records.", Severity.Error);
        }
    }
    void Search(string searchString)
    {
        DataSource = new();
        DataSource = list.Where(i =>
                                      i.Investor.PersonalDetails.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                      i.Investor.PersonalDetails.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                      i.Investor.PersonalDetails.NrcNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                      ((DateTime)i.DateInvested).ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                       i.CreatedBy.Contains(searchString, StringComparison.OrdinalIgnoreCase)
                                     ).ToList();
        StateHasChanged();
    }
    async Task Refresh()
    {
        DataSource = new();
        DataSource = await investmentService.GetByPeriod(investmentPeriod, VillageBank.Id);
        list = new HashSet<Investment>(DataSource);
        StateHasChanged();
    }
    async void Filter(int value)
    {
        investmentPeriod = value;
        await Refresh();
        StateHasChanged();
    }
    async void Approve(Investment record)
    {
        if (record.Status == Status.Approved)
        {
            return;
        }
        else
        {
            if (await memberRoleService.IsChairperson(myGuid))
            {

                var parameters = new DialogParameters();
                parameters.Add("ContentText", "Do you want to approve this investment?");
                parameters.Add("DialogType", DialogType.Confirm);
                var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true };
                var dialog = dialogService.Show<SimpleDialog>("Approve Investment", parameters, options);
                var response = await dialog.Result;
                if (!response.Cancelled)
                {


                    if (await investmentService.ToggleStatus(record))
                    {
                        snackBar.Add("Investment Approved.", Severity.Success);
                        await Refresh();
                    }
                    else
                    {
                        snackBar.Add("Oops, Something went wrong, try again later.", Severity.Error);
                    }
                }
                else
                {
                    return;
                }
            }
            else
            {
                snackBar.Add("Only a group chairperson can approve investments.", Severity.Error);
            }

        }
    }
}