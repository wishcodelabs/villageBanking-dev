@page "/group/investments"

<AuthorizeView Roles="GroupAdmin">
    <Authorized>
        <MudContainer Class="mt-16 px-8 cont" MaxWidth="MaxWidth.False">
            <MudGrid Spacing="3" Justify="Justify.Center">
                <MudItem align="center" xs="12">
                    <MudPaper Elevation="20" Class="title-card p-4 ">
                        <MudText Class="text-white" Align="Align.Center" Typo="Typo.h5">Manage Investments</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudButton OnClick="ToggleAdd" Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircle">Add</MudButton>
                </MudItem>
                <MudItem xs="12">
                    <table class="table table-striped table-hover table-responsive-sm">
                        <caption>List of Investments</caption>
                        <thead class="thead-dark">
                            <tr>
                                <th>Date Invested</th>
                                <th>Investment Period</th>
                                <th>Investor Name</th>
                                <th>Investor NRC</th>
                                <th>Amount Invested</th>
                                <th>Added By</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in DataSource)
                            {

                                Color color = (item.Status == Status.Approved) ? Color.Success : Color.Dark;
                                <tr class="text-white">
                                   
                                    <td>@Convert.ToDateTime(item.DateInvested).ToShortDateString()</td>
                                    <td>@(Convert.ToDateTime(item.Period.BeginDate).ToShortDateString()) - @(Convert.ToDateTime(item.Period.EndDate).ToShortDateString())</td>
                                    <td>@item.Investor.PersonalDetails.FirstName @item.Investor.PersonalDetails.LastName</td>
                                    <td>@item.Investor.PersonalDetails.NrcNumber</td>
                                    <td>@item.AmountInvested.ToString("N2") ZMW</td>
                                    <td>@item.CreatedBy</td>
                                    <td><MudChip title="Change status" OnClick="()=>Approve(item)" Size="Size.Small" Color="color" Text="@item.Status.ToString()" /></td>
                                    <td>
                                        <MudButton title="edit this record" OnClick="()=>ToggleEdit(item)" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning">Edit</MudButton>
                                        <MudButton title="Permanently delete this item?"  OnClick="()=>ToggleDelete(item)" StartIcon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" Color="Color.Error">Delete</MudButton>
                                    </td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </Authorized>
</AuthorizeView>
<style>
    body {
        background-color: #13262F;
    }

    .cont {
        background-color: #13262F;
    }

    .title-card {
        max-width: fit-content;
        border-radius: 10px;
        background-color: #13262F;
    }
</style>

@code{
    [CascadingParameter] Task<AuthenticationState>AuthenticationStateTask{ get; set; }
    VillageBankGroup VillageBank { get; set; } = new();
    ClaimsPrincipal claimsPrincipal = new();
    Guid myGuid = new();
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center, DisableBackdropClick = true };



    List<Investment> DataSource { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
       claimsPrincipal = (await AuthenticationStateTask).User;
        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            myGuid = await userService.GetGuid(claimsPrincipal.Identity.Name);
            var admin = await groupAdminService.GetByUserGuid(myGuid);
            VillageBank = admin.Group;
            DataSource = await investmentService.GetByGroup(VillageBank.Id);

        } 
    }
    async Task ToggleAdd()
    {

    }
    async Task ToggleEdit(Investment record)
    {

    }
    async Task ToggleDelete(Investment record)
    {

    }
    async void Filter()
    {

    }
    async void Approve(Investment record)
    {
        
    }
}